package codeRequest

import (
	"testing"
)

type MockExecutor struct {
	Args    []string
	Command string
	Debug   bool
	Output  []byte
}

func (me *MockExecutor) Exec(execType string, command string, args ...string) ([]byte, error) {
	me.Command = command
	me.Args = args
	return me.Output, nil
}

func Test_autogeneratedTitle(t *testing.T) {
	tests := []struct {
		name           string
		executorOutput []byte
		expected       string
	}{
		{
			name:           "regular branch",
			executorOutput: []byte("* feature-branch"),
			expected:       "Feature branch",
		},
		{
			name:           "single word branch",
			executorOutput: []byte("* feature"),
			expected:       "Feature",
		},
		{
			name:           "Jira branch with underscores",
			executorOutput: []byte("* jira_123_something"),
			expected:       "JIRA-123 Something",
		},
		{
			name:           "Jira branch with dashes",
			executorOutput: []byte("* jira-123-something"),
			expected:       "JIRA-123 Something",
		},
		{
			name:           "Jira branch with combo 1",
			executorOutput: []byte("* jira-123_something"),
			expected:       "JIRA-123 Something",
		},
		{
			name:           "Jira branch with combo 2",
			executorOutput: []byte("* jira_123-something-else"),
			expected:       "JIRA-123 Something else",
		},
		{
			name:           "Jira branch with combo 3",
			executorOutput: []byte("* jira-29142"),
			expected:       "JIRA-29142 ",
		},
	}

	for _, test := range tests {
		executor := &MockExecutor{
			Debug:  true,
			Output: test.executorOutput,
		}

		cr := newCodeRequest(true, executor)
		resp := cr.autogeneratedTitle()

		if resp != test.expected {
			t.Fatalf(`expected %v, but got %v`, test.expected, resp)
		}
	}
}

func Test_checkAllLetters(t *testing.T) {
	executor := &MockExecutor{Debug: true}
	cr := newCodeRequest(true, executor)
	resp := cr.checkAllLetters("iekslkjasd")

	if resp == false {
		t.Fatalf(`string %v should be all letters`, resp)
	}

	resp = cr.checkAllLetters("iekslkjasd321")

	if resp == true {
		t.Fatalf(`string %v should not be all letters`, resp)
	}
}

func Test_checkAllNumbers(t *testing.T) {
	executor := &MockExecutor{Debug: true}
	cr := newCodeRequest(true, executor)
	resp := cr.checkAllNumbers("284161")

	if resp == false {
		t.Fatalf(`string %v should be all numbers`, resp)
	}

	resp = cr.checkAllNumbers("39812k3jiksd9z")

	if resp == true {
		t.Fatalf(`string %v should not be all numbers`, resp)
	}
}

func Test_matchesFullJiraPattern(t *testing.T) {
	executor := &MockExecutor{Debug: true}
	cr := newCodeRequest(true, executor)
	resp := cr.matchesFullJiraPattern("jira-29142")

	if resp == false {
		t.Fatalf(`string %v should match Jira pattern (e.g. jira-123)`, resp)
	}

	resp = cr.matchesFullJiraPattern("jIra*3291")

	if resp == true {
		t.Fatalf(`string %v should not match Jira pattern (e.g. jira-123)`, resp)
	}
}

func Test_titleize(t *testing.T) {
	executor := &MockExecutor{Debug: true}
	cr := newCodeRequest(true, executor)
	resp := cr.titleize("mysTrInG")

	if resp != "MysTrInG" {
		t.Fatalf(`string %v was not properly titleized`, resp)
	}
}

func Test_isGitHub(t *testing.T) {
	tests := []struct {
		remotes  string
		expected bool
	}{
		{
			remotes: `origin  git@github.com:emmahsax/go-git-helper.git (fetch)
origin  git@github.com:emmahsax/go-git-helper.git (push)`,
			expected: true,
		},
		{
			remotes: `origin  git@gitlab.com:emmahsax/github-project.git (fetch)
origin  git@gitlab.com:emmahsax/github-project.git (push)`,
			expected: false,
		},
	}

	for _, test := range tests {
		executor := &MockExecutor{
			Debug:  true,
			Output: []byte(test.remotes),
		}
		cr := newCodeRequest(true, executor)
		resp := cr.isGitHub()

		if resp != test.expected {
			t.Fatalf(`should have been %v, but was %v`, test.expected, resp)
		}
	}
}

func Test_isGitLab(t *testing.T) {
	tests := []struct {
		remotes  string
		expected bool
	}{
		{
			remotes: `origin  git@gitlab.com:emmahsax/go-git-helper.git (fetch)
origin  git@gitlab.com:emmahsax/go-git-helper.git (push)`,
			expected: true,
		},
		{
			remotes: `origin  git@github.com:emmahsax/gitlab-project.git (fetch)
origin  git@github.com:emmahsax/gitlab-project.git (push)`,
			expected: false,
		},
	}

	for _, test := range tests {
		executor := &MockExecutor{
			Debug:  true,
			Output: []byte(test.remotes),
		}
		cr := newCodeRequest(true, executor)
		resp := cr.isGitLab()

		if resp != test.expected {
			t.Fatalf(`should have been %v, but was %v`, test.expected, resp)
		}
	}
}

func Test_containsSubstring(t *testing.T) {
	executor := &MockExecutor{Debug: true}
	cr := newCodeRequest(true, executor)
	strs := []string{"string1", "string3", "string18"}
	resp := cr.containsSubstring(strs, "string3")

	if resp == false {
		t.Fatalf(`string %v should be present in %v`, "string3", strs)
	}

	resp = cr.containsSubstring(strs, "string2")

	if resp == true {
		t.Fatalf(`string %v should not be present in %v`, "string2", strs)
	}
}
